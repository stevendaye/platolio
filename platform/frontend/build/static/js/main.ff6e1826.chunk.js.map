{"version":3,"sources":["reducers/notifications.js","constants/types.js","reducers/auth.js","reducers/profile.js","reducers/post.js","reducers/index.js","store/index.js","components/routes/PrivateRoute.js","utils/setAuthTokenHeader.js","apis/register.js","thunks/notifications.js","actions/notifications.js","thunks/register.js","actions/auth.js","actions/profile.js","components/layout/Navbar.js","components/layout/Landing.js","components/auth/SignUp.js","apis/login.js","thunks/login.js","components/auth/Login.js","components/layout/Notifications.js","apis/profile.js","thunks/profile.js","components/layout/Spinner.js","components/dashboard/DashboardActions.js","components/dashboard/Experience.js","components/dashboard/Education.js","components/dashboard/Dashboard.js","components/Forms/Profile/CreateProfile.js","components/Forms/Profile/EditProfile.js","components/Forms/Profile/AddExprience.js","components/Forms/Profile/AddEducation.js","components/profiles/ProfileItem.js","components/profiles/Profiles.js","components/profile/ProfileTop.js","components/profile/ProfileAbout.js","components/profile/ProfileExperience.js","components/profile/ProfileEducation.js","components/profile/ProfileGithub.js","components/profile/Profile.js","actions/post.js","apis/post.js","thunks/post.js","components/posts/PostItem.js","components/Forms/Post/PostForm.js","components/posts/Posts.js","components/Forms/Post/CommentForm.js","components/posts/Comments.js","components/posts/Post.js","App.js","index.js"],"names":["initialState","applySetNotification","state","payload","id","applyRemoveNotification","notificationReducer","action","type","user","token","localStorage","getItem","isAuthenticated","isLoading","applyAuthenticateSuccess","setItem","applyLoadUser","applyAuthenticateFail","removeItem","authReducer","initialSate","profile","profiles","repos","error","doApplyGetAllProfiles","doApplyGetProfile","doApplyProfileError","doApplyClearProfile","doApplyGetGithubRepos","profileReducer","posts","post","doApplyGetPosts","doApplyGetSinglePost","doApplyAddPost","doApplyAddComment","comments","doApplyRemoveComment","filter","comment","_id","doApplyPostError","doApplyUpdateLike","map","likes","doApplyDeletePost","postReducer","rootReducer","combineReducers","notificationsState","notificationsReducer","authState","profileState","postState","logger","createLogger","middleware","thunk","store","createStore","undefined","composeWithDevTools","applyMiddleware","ConnectedPrivateRoute","connect","auth","Component","component","rest","render","props","to","setAuthTokenHeader","axios","defaults","headers","common","registerUser","name","email","password","a","config","body","JSON","stringify","getUser","get","uuid","doSetRemoveNotification","message","alert","dispatch","doSetNotification","setTimeout","doLoadUserWithErrorCheck","res","data","doRegisterUserWithErrorCheck","errors","response","forEach","msg","doCreateOrUpdateProfile","doGetProfile","doSetProfileError","Navbar","onLogout","authLinks","className","split","href","onClick","guestLinks","propsTypes","PropTypes","object","isRequired","func","ConnectedNavbar","ConnectedLanding","SignUp","confirmPass","onChange","bind","onSubmit","e","this","setState","target","value","preventDefault","onSetNotification","onRegister","placeholder","ref","el","nameInput","required","minLength","ConnectedSignUp","loginUser","doLoginUserWithErrorCheck","Login","onLogin","mailInput","ConnectedLogin","getNotifications","Object","keys","key","ConnectedNotifications","notifications","length","note","createProfile","profileFormData","getCurrentProfile","getProfiles","getProfileByUserid","userid","addExperience","expFormData","put","removeExperience","expid","delete","addEducation","eduFormData","removeEducation","eduid","deleteAccount","getGithubRepos","username","doGetProfileWithErrorCheck","statusText","status","doCreateOrUpdateProfileWithErrorCheck","history","edit","push","Spinner","style","textAlign","DashboardActions","ConnectedExperience","onRemoveExperience","doRemoveExperienceWithErrorCheck","experience","experiences","exp","company","title","format","from","ConnectedEducation","onRemoveEducation","doRemoveEducationWithErrorCheck","education","educations","edu","school","degree","ConnectedDashboard","onGetProfile","onDeleteAcount","window","confirm","useEffect","marginRight","ConnectedCreateProfile","onCreateProfile","withRouter","useState","website","location","bio","githubusername","skills","twitter","linkedin","facebook","instagram","youtube","onSetProfileFormData","diplaySocialLinks","onToggleSocialLinks","EditProfile","_isMounted","onToggle","onGetCurrentProfile","join","ConnectedEditProfile","AddExperience","current","description","onChecked","onAddExperience","disabled","cols","rows","ConnectedAddExperience","doAddExperienceWithErrorCheck","AddEducation","fieldofstudy","onAddEducation","ConnectedAddEducation","doAddEducationWithErrorCheck","ProfileItem","avatar","src","alt","slice","skill","index","ConnectedProfiles","onGetProfiles","ProfileTop","social","rel","ProfileAbout","trim","ProfileExperience","ProfileEducation","ConnectedProfileGithub","onGetGithubRepos","doGetGithubReposWithErrorCheck","repo","html_url","stargazers_count","watchers_count","forks_count","ConnectedProfile","onGetProfileById","match","params","doSetPostError","getPosts","getSinglePost","addPost","formPostData","addComment","postid","formCommentData","removeComment","commentid","addLike","removeLike","deletePost","doGetPostsWithErrorCheck","PostItem","text","timestamp","onDeletePost","onAddLike","onRemoveLike","displayActions","fromNow","defaultProps","ConnectedPostItem","doAddLikeWithErrorCheck","doRemoveLikeWithErrorCheck","doSetRemoveNoification","doDeletePostWithErrorCheck","ConnectedPostForm","onAddPost","onSetText","marginBottom","ConnectedPosts","onGetPosts","ConnectedCommentForm","onAddComment","commentFormData","doAddCommentWithErrorCheck","ConnectedComments","onRemoveComment","doRemoveCommentWithErrorCheck","ConnectedPost","onGetSinglePost","doGetSinglePostWithErrorCheck","App","exact","path","Landing","Profiles","Profile","Dashboard","CreateProfile","Posts","Post","ReactDOM","document","getElementById","module","hot"],"mappings":"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","file":"static/js/main.ff6e1826.chunk.js","sourcesContent":["import { SET_NOTIFICATION, REMOVE_NOTIFICATION } from \"../constants/types\";\n\nconst initialState = {};\n\nconst applySetNotification = (state, payload) => {\n  const { id } = payload;\n  return { ...state, [id]: payload };\n};\n\nconst applyRemoveNotification = (state, payload) => {\n  const { [payload]: notificationToRemove, ...restNotifications } = state;\n  return restNotifications;\n};\n\nconst notificationReducer = (state = initialState, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case SET_NOTIFICATION:\n      return applySetNotification(state, payload);\n    case REMOVE_NOTIFICATION:\n      return applyRemoveNotification(state, payload);\n    default:\n      return state;\n  }\n}\n\nexport default notificationReducer;\n","const SET_NOTIFICATION = \"SET_NOTIFICATION\";\nconst REMOVE_NOTIFICATION = \"REMOVE_NOTIFICATION\";\n\nconst REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nconst REGISTER_FAIL = \"REGISTER_FAIL\";\nconst USER_LOADED = \"USER_LOADED\";\nconst AUTH_TOKEN_ERROR = \"AUTH_TOKEN_ERROR\";\nconst LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nconst LOGIN_FAIL = \"LOGIN_FAIL\";\nconst LOGOUT = \"LOGOUT\";\n\nconst GET_PROFILE = \"GET_PROFILE\";\nconst GET_PROFILES = \"GET_PROFILES\";\nconst CREATE_PROFILE = \"CREATE_PROFILE\";\nconst UPDATE_PROFILE = \"UPDATE_PROFILE\";\nconst PROFILE_ERROR = \"PROFILE_ERROR\";\nconst CLEAR_PROFILE = \"CLEAR_PROFILE\";\nconst DELETE_ACCOUNT = \"DELETE_ACCOUNT\";\nconst GET_REPOS = \"GET_REPOS\";\n\nconst POSTS_GET = \"POSTS_GET\";\nconst POST_GET = \"POST_GET\";\nconst POST_ADD = \"POST_ADD\";\nconst POST_ERROR = \"POST_ERROR\";\nconst POST_DELETE = \"POST_DELETE\";\nconst COMMENT_ADD = \"COMMENT_ADD\";\nconst COMMENT_REMOVE = \"COMMENT_REMOVE\";\nconst UPDATE_LIKE = \"UPDATE_LIKE\";\n\nexport {\n  SET_NOTIFICATION, REMOVE_NOTIFICATION, REGISTER_SUCCESS, REGISTER_FAIL,\n  USER_LOADED, AUTH_TOKEN_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT,\n  GET_PROFILE, GET_PROFILES, CREATE_PROFILE, UPDATE_PROFILE,\n  DELETE_ACCOUNT, PROFILE_ERROR, CLEAR_PROFILE, GET_REPOS,\n  POSTS_GET, POST_GET, POST_ADD, POST_ERROR, POST_DELETE,\n  COMMENT_ADD, COMMENT_REMOVE, UPDATE_LIKE\n};\n","import { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_TOKEN_ERROR,\n  DELETE_ACCOUNT, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT\n} from \"../constants/types\";\n\nconst initialState = {\n  user: null,\n  token: localStorage.getItem(\"token\"),\n  isAuthenticated: null,\n  isLoading: true\n}\n\nconst applyAuthenticateSuccess = (state, payload) => {\n  localStorage.setItem(\"token\", payload.token);\n  return {\n    ...state,\n    ...payload,\n    isAuthenticated: true,\n    isLoading: false\n  }\n};\n\nconst applyLoadUser = (state, payload) => {\n  return {\n    ...state,\n    isAuthenticated: true,\n    user: payload,\n    isLoading: false\n  }\n}\n\nconst applyAuthenticateFail = (state, payload) => {\n  localStorage.removeItem(\"token\");\n  return {\n    ...state,\n    token: null,\n    isAuthenticated: false,\n    isLoading: false\n  }\n};\n\nconst authReducer = (state = initialState, action) => {\n  const { type, payload } = action\n  switch (type) {\n    case REGISTER_SUCCESS:\n    case LOGIN_SUCCESS:\n      return applyAuthenticateSuccess(state, payload);\n    case USER_LOADED:\n      return applyLoadUser(state, payload);\n    case REGISTER_FAIL:\n    case LOGIN_FAIL:\n    case LOGOUT:\n    case AUTH_TOKEN_ERROR:\n    case DELETE_ACCOUNT:\n      return applyAuthenticateFail(state, payload);\n    default:\n      return state;\n  }\n}\n\nexport default authReducer;\n","import { GET_PROFILES, GET_PROFILE, PROFILE_ERROR, CLEAR_PROFILE,\n  CREATE_PROFILE, GET_REPOS\n} from \"../constants/types\"\n\nconst initialSate = {\n  profile: null,\n  profiles: [],\n  repos: [],\n  isLoading: true,\n  error: {}\n};\n\nconst doApplyGetAllProfiles = (state, payload) => ({\n  ...state,\n  profiles: payload,\n  isLoading: false\n});\n\nconst doApplyGetProfile = (state, payload) => ({\n  ...state,\n  profile: payload,\n  isLoading: false,\n  error: {}\n});\n\nconst doApplyProfileError = (state, payload) => ({\n  ...state,\n  profile: null,\n  repos: [],\n  isLoading: false,\n  error: payload\n});\n\nconst doApplyClearProfile = state => ({\n  ...state,\n  profile: null,\n  repos: [],\n  isLoading: false,\n  error: {}\n});\n\nconst doApplyGetGithubRepos = (state, payload) => ({\n  ...state,\n  repos: payload,\n  isLoading: false\n});\n\nconst profileReducer = (state = initialSate, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case GET_PROFILES:\n      return doApplyGetAllProfiles(state, payload);\n    case CREATE_PROFILE:\n    case GET_PROFILE:\n      return doApplyGetProfile(state, payload);\n    case PROFILE_ERROR:\n      return doApplyProfileError(state, payload);\n    case CLEAR_PROFILE:\n      return doApplyClearProfile(state)\n    case GET_REPOS:\n      return doApplyGetGithubRepos(state, payload);\n    default:\n      return state;\n  }\n}\n\nexport default profileReducer;\n","import { POSTS_GET, POST_ERROR, UPDATE_LIKE, POST_DELETE, POST_ADD,\n  POST_GET, COMMENT_ADD, COMMENT_REMOVE\n} from \"../constants/types\";\n\nconst initialState = {\n  posts: [],\n  post: null,\n  isLoading: true,\n  error: {}\n};\n\nconst doApplyGetPosts = (state, payload) => ({\n  ...state,\n  posts: payload,\n  isLoading: false\n});\n\nconst doApplyGetSinglePost = (state, payload) => ({\n  ...state,\n  post: payload,\n  isLoading: false\n});\n\nconst doApplyAddPost = (state, payload) => ({\n  ...state,\n  posts: [payload, ...state.posts],\n  isLoading: false\n});\n\nconst doApplyAddComment = (state, payload) => ({\n  ...state,\n  post: {...state.post, comments: payload},\n  isLoading: false\n});\n\nconst doApplyRemoveComment = (state, payload) => ({\n  ...state,\n  post: {\n    ...state.post,\n    comments: state.post.comments.filter(comment => comment._id !== payload)\n  },\n  isLoading: false\n});\n\nconst doApplyPostError = (state, payload) => ({\n  ...state,\n  isLoading: false,\n  error: payload,\n});\n\nconst doApplyUpdateLike = (state, payload) => ({\n  ...state,\n  posts: state.posts.map(post =>\n    post._id === payload.id\n      ? {...post, likes: payload.likes}\n      : post\n    ),\n  isLoading: false\n});\n\nconst doApplyDeletePost = (state, payload) => ({\n  ...state,\n  posts: state.posts.filter(post => post._id !== payload),\n  isLoading: false\n});\n\nconst postReducer = (state = initialState, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case POSTS_GET:\n      return doApplyGetPosts(state, payload);\n    case POST_GET:\n      return doApplyGetSinglePost(state, payload);\n    case POST_ADD:\n      return doApplyAddPost(state, payload);\n    case POST_DELETE:\n      return doApplyDeletePost(state, payload);\n    case COMMENT_ADD:\n      return doApplyAddComment(state, payload);\n    case COMMENT_REMOVE:\n      return doApplyRemoveComment(state, payload);\n    case POST_ERROR:\n      return doApplyPostError(state, payload);\n    case UPDATE_LIKE:\n      return doApplyUpdateLike(state, payload);\n    default:\n      return state;\n  }\n};\n\nexport default postReducer;\n","import { combineReducers } from \"redux\";\nimport notificationsReducer from \"./notifications\";\nimport authReducer from \"./auth\";\nimport profileReducer from \"./profile\";\nimport postReducer from \"./post\";\n\nconst rootReducer = combineReducers({\n  notificationsState: notificationsReducer,\n  authState: authReducer,\n  profileState: profileReducer,\n  postState: postReducer\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { createLogger } from \"redux-logger\"\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport rootReducer from \"../reducers\";\n\nconst logger = createLogger();\nconst middleware = [thunk, logger];\n\nconst store = createStore(rootReducer, undefined, composeWithDevTools(applyMiddleware(...middleware)));\n\nexport default store;\n","/* Create a provate route component to redirect the user upon logging out */\nimport React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nconst PrivateRoute = ({ component: Component, auth: { isAuthenticated, isLoading }, ...rest }) => (\n  <Route\n    { ...rest }\n    render = { props =>\n      !isAuthenticated && !isLoading ? (\n        <Redirect to = \"/login\"/>\n      ) : (\n        <Component { ...props } />\n      )\n    }\n  />\n);\n\nPrivateRoute.propTypes = {\n  auth: PropTypes.object.isRequired\n}\n\nconst mapStateToPropsPrivateRoute = state => ({\n  auth: state.authState\n});\n\nconst ConnectedPrivateRoute = connect(mapStateToPropsPrivateRoute)(PrivateRoute);\n\nexport default ConnectedPrivateRoute;\n","/* Getting the token from the Local Storage and to set it in the header */\nimport axios from \"axios\";\n\nconst setAuthTokenHeader = token => {\n  if (token) {\n    axios.defaults.headers.common[\"x-auth-token\"] = token;\n  } else {\n    delete axios.defaults.headers.common[\"x-auth-token\"];\n  }\n}\n\nexport default setAuthTokenHeader;\n","/* Create User API */\nimport axios from \"axios\";\n\nconst INDEX_URL = \"/index\";\nconst BASE_URL = \"/users/register\";\n\nconst registerUser = async (name, email, password) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  const body = JSON.stringify({ name, email, password });\n\n  return await axios.post(BASE_URL, body, config);\n};\n\nconst getUser = async () => {\n  return await axios.get(INDEX_URL);\n}\n\nexport default registerUser;\nexport { getUser };\n","/* Notification thunk */\nimport uuid from \"uuid/v4\";\nimport { doSetNotification, doRemoveNotification } from \"../actions/notifications\";\n\nconst id = uuid(); const timeout = 5000;\n\nconst doSetRemoveNotification = (message, alert) => {\n  return function(dispatch) {\n    dispatch(doSetNotification(id, message, alert));\n    setTimeout(() => {\n        dispatch(doRemoveNotification(id))\n      }, timeout)\n    };\n};\n\nexport default doSetRemoveNotification;\n","import { SET_NOTIFICATION, REMOVE_NOTIFICATION } from \"../constants/types\";\n\nconst doSetNotification = (id, message, alert) => {\n  return {\n    type: SET_NOTIFICATION,\n    payload: { id, message, alert }\n  }\n};\n\nconst doRemoveNotification = id => {\n  return {\n    type: REMOVE_NOTIFICATION,\n    payload: id\n  }\n};\n\nexport { doSetNotification, doRemoveNotification };\n","/* Created fat thunks to call the register api while cheking for errors */\nimport registerUser, { getUser } from \"../apis/register\";\nimport doSetRemoveNotification from \"../thunks/notifications\";\nimport { doRegisterSuccess, doRegisterFail, doLoadUser, doSetAuthError } from \"../actions/auth\";\nimport setAuthTokenHeader from \"../utils/setAuthTokenHeader\";\n\n// Register user in the backend and token sent back to store and local storage\nconst doRegisterUserWithErrorCheck = (name, email, password) => {\n  return async function(dispatch) {\n    try {\n      const res = await registerUser(name, email, password);\n      dispatch(doRegisterSuccess(res.data));\n      dispatch(doLoadUserWithErrorCheck());\n    } catch (err) {\n      const errors = err.response.data.errors;\n      if (errors) {\n        errors.forEach(error => dispatch(doSetRemoveNotification(error.message || error.msg, \"danger\")));\n      }\n      dispatch(doRegisterFail());\n    }\n  }\n};\n\n// Then loads the user info after checking if the sent token is available in the header from the local storage;\nconst doLoadUserWithErrorCheck = () => {\n  if (localStorage.token) {\n    setAuthTokenHeader(localStorage.token);\n  }\n  return async function(dispatch) {\n    try {\n      const res = await getUser();\n      dispatch(doLoadUser(res.data));\n    } catch (err) {\n      dispatch(doSetAuthError());\n    }\n  }\n};\n\nexport default doRegisterUserWithErrorCheck;\nexport { doLoadUserWithErrorCheck };\n","import { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_TOKEN_ERROR,\n  LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT\n} from \"../constants/types\";\n\n// Register Action Creators\nconst doRegisterSuccess = payload => {\n  return {\n    type: REGISTER_SUCCESS,\n    payload\n  }\n};\n\nconst doRegisterFail = () => {\n  return {\n    type: REGISTER_FAIL\n  }\n}\n\n// Login User Action Creators\nconst doLoginUserSuccess = payload => {\n  return {\n    type: LOGIN_SUCCESS,\n    payload\n  }\n};\n\nconst doLoginUserFail = () => {\n  return {\n    type: LOGIN_FAIL\n  }\n};\n\n\n// Load User Info Action Creators\nconst doLoadUser = payload => {\n  return {\n    type: USER_LOADED,\n    payload\n  }\n}\n\nconst doSetAuthError = () => {\n  return {\n    type: AUTH_TOKEN_ERROR\n  }\n}\n\n// Logout user\nconst doLogout = () => ({\n  type: LOGOUT\n});\n\nexport { doRegisterSuccess, doRegisterFail, doLoadUser, doSetAuthError,\n  doLoginUserSuccess, doLoginUserFail, doLogout\n};\n","import { GET_PROFILES, GET_PROFILE, PROFILE_ERROR, CLEAR_PROFILE, \n  GET_REPOS, CREATE_PROFILE, UPDATE_PROFILE, DELETE_ACCOUNT\n} from \"../constants/types\";\n\nconst doCreateOrUpdateProfile = payload => ({\n  type: CREATE_PROFILE,\n  payload\n});\n\nconst doGetProfiles = payload => ({\n  type: GET_PROFILES,\n  payload\n});\n\nconst doGetProfile = payload => ({\n  type: GET_PROFILE,\n  payload\n});\n\nconst doSetProfileError = payload => ({\n  type: PROFILE_ERROR,\n  payload\n});\n\nconst doClearProfile = () => ({\n  type: CLEAR_PROFILE\n});\n\nconst doSetAddExperience =  payload => ({\n  type: UPDATE_PROFILE,\n  payload\n});\n\nconst doSetRemoveExperience = payload => ({\n  type: UPDATE_PROFILE,\n  payload\n});\n\nconst doSetAddEducation = payload => ({\n  type: UPDATE_PROFILE,\n  payload\n});\n\nconst doSetRemoveEducation = payload => ({\n  type: UPDATE_PROFILE,\n  payload\n});\n\nconst doDeleteAccount = () => ({\n  type: DELETE_ACCOUNT\n});\n\nconst doGetGithubRepos = payload => ({\n  type: GET_REPOS,\n  payload\n});\n\nexport { doCreateOrUpdateProfile, doGetProfiles, doGetProfile, doSetProfileError,\n  doClearProfile, doSetAddExperience, doSetRemoveExperience, doSetAddEducation,\n  doSetRemoveEducation, doDeleteAccount, doGetGithubRepos\n};\n","import React, { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { doLogout } from \"../../actions/auth\";\nimport { doClearProfile } from \"../../actions/profile\";\nimport PropTypes from \"prop-types\";\n\nconst Navbar = ({ auth: { isAuthenticated, isLoading, user }, onLogout }) => {\n  const authLinks = (\n    <ul>\n      <li>\n        <Link to = \"/profiles\">\n          <i className = \"fas fa-users\"></i>\n          &nbsp; Developers\n        </Link>\n      </li>\n      <li>\n        <Link to = \"/posts\">\n          <i className = \"fas fa-edit\"></i>\n          &nbsp; Posts\n        </Link>\n      </li>\n      <li>\n        <Link to = \"/dashboard\">\n        <i className = \"fas fa-user\"></i>{\" \"}\n        <span>{ user && user.name.split(\" \")[0] }</span>\n        </Link>\n      </li>\n      <li>\n        <a href = \"#/logout\" onClick = { onLogout }>\n          <i className = \"fas fa-sign-out-alt\"></i>{\" \"}\n          <span>logout</span>\n        </a>\n      </li>\n    </ul>\n  );\n\n  const guestLinks = (\n    <ul>\n      <li>\n        <Link to = \"/profiles\">\n          <i className = \"fas fa-users\"></i>\n          &nbsp; Developers\n        </Link>\n      </li>\n      <li>\n        <Link to = \"/signup\">\n          <i className = \"fas fa-user-plus\"></i>\n          &nbsp; Sign Up\n        </Link>\n      </li>\n      <li>\n        <Link to = \"/login\">\n          <i className = \"fas fa-sign-in-alt\"></i>\n          &nbsp; Login\n        </Link>\n      </li>\n    </ul>\n  );\n\n  return (\n    <nav className=\"navbar bg-dark\">\n      <h1>\n        <Link to=\"/\">\n          Platolio\n        </Link>\n      </h1>\n      { !isLoading && (\n        <Fragment>{ isAuthenticated ? authLinks : guestLinks }</Fragment>\n      )}\n    </nav>\n  );\n}\n\nNavbar.propsTypes = {\n  auth: PropTypes.object.isRequired,\n  onLogout: PropTypes.func.isRequired\n}\n\nconst mapStateToPropsNavbar = state => ({\n  auth: state.authState,\n});\n\nconst mapDispatchToPropsNavbar = dispatch => ({\n  onLogout: () => dispatch(doLogout()) && dispatch(doClearProfile())\n});\n\nconst ConnectedNavbar = connect(mapStateToPropsNavbar, mapDispatchToPropsNavbar)(Navbar);\n\nexport default ConnectedNavbar;\n","import React, { Fragment } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nconst Landing = ({ isAuthenticated }) => {\n  if (isAuthenticated) {\n    return <Redirect to = \"/dashboard\"/>\n  }\n\n  return (\n    <Fragment>\n      <section className=\"landing\">\n        <div className=\"dark-overlay\">\n          <div className=\"landing-inner\">\n            <h1 className=\"x-large\">Platolio</h1>\n            <p className=\"lead\">\n              Create a developer profile to share posts and get help from other developers\n            </p>\n            <div className=\"buttons\">\n              <Link to=\"/signup\" className=\"btn btn-primary\">\n                Sign Up\n              </Link>\n              <Link to=\"/login\" className=\"btn btn-light\">\n                Login\n              </Link>\n            </div>\n          </div>\n        </div>\n      </section>\n    </Fragment>\n  )\n};\n\nLanding.propTypes = {\n  isAuthenticated: PropTypes.bool\n}\n\nconst mapStateToPropsLanding = state => ({\n  isAuthenticated: state.authState.isAuthenticated\n});\n\nconst ConnectedLanding = connect(mapStateToPropsLanding)(Landing);\n\nexport default ConnectedLanding;\n","import React, { Fragment, Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport doSetRemoveNotification from \"../../thunks/notifications\";\nimport doRegisterUserWithErrorCheck from \"../../thunks/register\";\n\nclass SignUp extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPass: \"\"\n    }\n\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onChange(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n  async onSubmit(e) {\n    const { name, email, password, confirmPass } = this.state;\n    e.preventDefault();\n    if (password !== confirmPass) {\n      this.props.onSetNotification(\"Passwords do not match\", \"danger\");\n    } else {\n      this.props.onRegister(name, email, password);\n    }\n  }\n\n  render () {\n    const { isAuthenticated } = this.props;\n    const { name, email, password, confirmPass } = this.state;\n\n    if (isAuthenticated) {\n      return <Redirect to = \"/dashboard\"/>\n    }\n    return (\n      <Fragment>\n        <h1 className = \"large text-primary\">Sign Up</h1>\n        <p className = \"lead\"><i className = \"fas fa-user\"></i> Create Your Account</p>\n\n        <form className = \"form\" onSubmit={ this.onSubmit }>\n          <div className = \"form-group\">\n            <input\n              type = \"text\"\n              placeholder = \"Name\"\n              name = \"name\"\n              value = {name}\n              onChange = { this.onChange }\n              ref = { el => this.nameInput = el }\n              required\n            />\n          </div>\n          <div className = \"form-group\">\n            <input\n              type = \"email\"\n              placeholder = \"Email Address\"\n              name = \"email\"\n              value = {email}\n              onChange = { this.onChange }\n              required\n            />\n            <small className = \"form-text\">\n              This site uses Gravatar so if you want a profile image, use a Gravatar email\n            </small>\n          </div>\n          <div className = \"form-group\">\n            <input\n              type = \"password\"\n              placeholder = \"Password\"\n              name = \"password\"\n              minLength = \"6\"\n              value = {password}\n              onChange = { this.onChange }\n              required\n            />\n          </div>\n          <div className = \"form-group\">\n            <input\n              type = \"password\"\n              placeholder = \"Confirm Password\"\n              name = \"confirmPass\"\n              minLength = \"6\"\n              value = {confirmPass}\n              onChange = { this.onChange }\n              required\n            />\n          </div>\n          <input type = \"submit\" className = \"btn btn-primary\" value = \"Sign Up\" />\n        </form>\n        <p className = \"my-1\">\n          Already have an account? <Link to=\"/login\">Sign In</Link>\n        </p>\n      </Fragment>\n    )\n  }\n}\n\nSignUp.propTypes = {\n  onSetNotification: PropTypes.func.isRequired,\n  onRegister: PropTypes.func.isRequired,\n  isAuthenticated: PropTypes.bool.isRequired\n};\n\nconst mapStateToPropsSignUp = state => ({\n  isAuthenticated: state.authState.isAuthenticated\n});\n\nconst mapDispatchToPropsSignUp = dispatch => {\n  return {\n    onSetNotification: (message, alert) =>\n      dispatch(doSetRemoveNotification(message, alert)),\n    onRegister: (name, email, password) =>\n      dispatch(doRegisterUserWithErrorCheck(name, email, password))\n  };\n}\n\nconst ConnectedSignUp = connect(mapStateToPropsSignUp, mapDispatchToPropsSignUp)(SignUp);\n\nexport default ConnectedSignUp;\n","import axios from \"axios\"\n\nconst LOGIN_URL = \"/users/login\";\n\nconst loginUser = async (email, password) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  const body = JSON.stringify({ email, password });\n\n  return await axios.post(LOGIN_URL, body, config);\n}\n\nexport default loginUser;\n","import { doLoginUserSuccess, doLoginUserFail } from \"../actions/auth\";\nimport doSetRemoveNotification from \"./notifications\";\nimport { doLoadUserWithErrorCheck } from \"./register\";\nimport loginUser from \"../apis/login\";\n\nconst doLoginUserWithErrorCheck = (email, password) => {\n  return async function(dispatch) {\n    try {\n      const res = await loginUser(email, password);\n      dispatch(doLoginUserSuccess(res.data));\n      dispatch(doLoadUserWithErrorCheck());\n    } catch (err) {\n      const errors = err.response.data.errors;\n      if (errors) {\n        errors.forEach(error => dispatch(doSetRemoveNotification(error.message || error.msg, \"danger\")));\n      }\n      dispatch(doLoginUserFail());\n    }\n  }\n};\n\nexport default doLoginUserWithErrorCheck;\n","import React, { Fragment, Component } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport doLoginUserWithErrorCheck from \"../../thunks/login\";\nimport PropTypes from \"prop-types\";\n\nclass Login extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: \"\",\n      password: \"\"\n    }\n\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onChange(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n  async onSubmit(e) {\n    const { email, password } = this.state;\n    e.preventDefault();\n    this.props.onLogin(email, password);\n  }\n\n  render () {\n    const { email, password } = this.state;\n    const { isAuthenticated } = this.props;\n\n    if (isAuthenticated) {\n      return <Redirect to = \"/dashboard\"/>\n    }\n\n    return (\n      <Fragment>\n        <h1 className = \"large text-primary\">Sign In</h1>\n        <p className = \"lead\"><i className = \"fas fa-user\"></i> Sign Into Your Account</p>\n\n        <form className = \"form\" onSubmit={ this.onSubmit }>\n          <div className = \"form-group\">\n            <input\n              type = \"email\"\n              placeholder = \"Email Address\"\n              name = \"email\"\n              value = {email}\n              onChange = { this.onChange }\n              ref = { el => this.mailInput = el }\n              required\n            />\n          </div>\n          <div className = \"form-group\">\n            <input\n              type = \"password\"\n              placeholder = \"Password\"\n              name = \"password\"\n              minLength = \"6\"\n              value = {password}\n              onChange = { this.onChange }\n              required\n            />\n          </div>\n          <input type=\"submit\" className = \"btn btn-primary\" value=\"Sign In\" />\n        </form>\n        <p className = \"my-1\">\n          Don't have an account? <Link to=\"/signup\">Sign Up</Link>\n        </p>\n      </Fragment>\n    )\n  }\n}\n\nLogin.propTypes = {\n  onLogin: PropTypes.func.isRequired,\n  isAuthenticated: PropTypes.bool\n}\n\nconst mapStateToPropsLogin = state => ({\n  isAuthenticated: state.authState.isAuthenticated\n});\n\nconst mapDisptachToPropsLogin = dispatch => {\n  return {\n    onLogin: (email, password) => dispatch(doLoginUserWithErrorCheck(email, password))\n  }\n};\n\nconst ConnectedLogin = connect(mapStateToPropsLogin, mapDisptachToPropsLogin)(Login);\n\nexport default ConnectedLogin;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nconst Notifications = ({ notifications }) =>\n  notifications !== null && notifications.length > 0 &&\n  <div>\n    {notifications.map(note =>\n      <div key = {note.id} className = {`alert alert-${note.alert}`}>\n        {note.message}\n      </div>\n    )}\n  </div>\n\nNotifications.propTypes = {\n  notifications: PropTypes.array.isRequired\n}\n\n// Create a seletor to select only the notification state\nconst getNotifications = state =>\n  getArrayOfObject(state.notificationsState);\n\n// Create mapStateToPropsNotifications to return a substate of the Notification state\nconst mapStateToPropsNotifications = state => {\n  return {\n    notifications: getNotifications(state)\n  };\n}\n\n// Convert the Notification state object in an array\nfunction getArrayOfObject(object) {\n  return Object.keys(object).map(key => object[key]);\n}\n\nconst ConnectedNotifications = connect(mapStateToPropsNotifications)(Notifications);\n\nexport default ConnectedNotifications;\n","import axios from \"axios\";\n\nconst PROFILE_URL = \"/users/profile\";\nconst PROFILES_URL = \"/users/profiles\";\nconst PROFILE_BY_USERID_URL = \"/users/profile/find\";\nconst CREATE_PROFILE_URL = \"/users/profile/create\";\nconst ADD_EXPERIENCE_URL = \"/users/profile/update/experience\";\nconst ADD_EDUCATION_URL = \"/users/profile/update/education\";\nconst REMOVE_EXPERIENCE_URL = \"/users/profile/remove/experience\";\nconst REMOVE_EDUCATION_URL = \"/users/profile/remove/education\";\nconst DELETE_ACCOUNT_URL = \"/users/profile/destroy\";\nconst GITHUB_URL = \"/users/auth/github\";\n\n// Create or Update Profile\nconst createProfile = async profileFormData => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  const body = JSON.stringify(profileFormData);\n\n  return await axios.post(CREATE_PROFILE_URL, body, config);\n};\n\n// Get Current Profile;\nconst getCurrentProfile = async () => {\n  return await axios.get(PROFILE_URL);\n};\n\n// Get All Profiles\nconst getProfiles = async () => {\n  return await axios.get(PROFILES_URL);\n};\n\n// Get Profile By Id;\nconst getProfileByUserid = async userid => {\n  return await axios.get(`${PROFILE_BY_USERID_URL}/${userid}`);\n};\n\n// Add/Update Experience\nconst addExperience = async expFormData => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  const body = JSON.stringify(expFormData);\n\n  return await axios.put(ADD_EXPERIENCE_URL, body, config);\n};\n\n// Remove Experience\nconst removeExperience = async expid => {\n  return await axios.delete(`${REMOVE_EXPERIENCE_URL}/${expid}`);\n};\n\n// Add/Update Education\nconst addEducation = async eduFormData => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  const body = JSON.stringify(eduFormData);\n\n  return await axios.put(ADD_EDUCATION_URL, body, config);\n};\n\n// Remove Education\nconst removeEducation = async eduid => {\n  return await axios.delete(`${REMOVE_EDUCATION_URL}/${eduid}`);\n};\n\n// Delete whole account + profile\nconst deleteAccount = async () => {\n  return await axios.delete(`${DELETE_ACCOUNT_URL}`);\n};\n\nconst getGithubRepos = async username => {\n  return await axios.get(`${GITHUB_URL}/${username}`);\n};\n\nexport default getCurrentProfile;\nexport { getProfiles, getProfileByUserid, createProfile, addExperience,\n  addEducation, removeExperience, removeEducation, deleteAccount,\n  getGithubRepos\n};\n","import { doCreateOrUpdateProfile, doGetProfile, doGetProfiles, doSetProfileError,\n  doSetAddExperience, doSetRemoveExperience, doSetAddEducation, doSetRemoveEducation,\n  doClearProfile, doDeleteAccount, doGetGithubRepos\n} from \"../actions/profile\";\nimport getCurrentProfile, { getProfiles, createProfile, getProfileByUserid,\n  addExperience, addEducation, removeExperience, removeEducation, deleteAccount,\n  getGithubRepos\n} from \"../apis/profile\";\nimport doSetRemoveNotification from \"../thunks/notifications\";\n\nconst doGetProfileWithErrorCheck = () => {\n  return async function (dispatch) {\n    try {\n        const profile = await getCurrentProfile();\n        dispatch(doGetProfile(profile.data));\n    } catch (err) {\n      dispatch(doSetProfileError({ message: err.response.statusText, status: err.response.status }));\n    }\n  }\n};\n\nconst doGetProfilesWithErrorCheck = () => {\n  return async function (dispatch) {\n    try {\n        const profiles = await getProfiles();\n        dispatch(doClearProfile());\n        dispatch(doGetProfiles(profiles.data));\n    } catch (err) {\n      dispatch(doSetProfileError({ message: err.response.statusText, status: err.response.status }));\n    }\n  }\n};\n\nconst doGetProfileByUseridWithErrorCheck = userid => {\n  return async function (dispatch) {\n    try {\n        const profile = await getProfileByUserid(userid);\n        dispatch(doGetProfile(profile.data));\n    } catch (err) {\n      dispatch(doSetProfileError({ message: err.response.statusText, status: err.response.status }));\n    }\n  }\n};\n\nconst doCreateOrUpdateProfileWithErrorCheck = (profileFormData, history, edit = false) => {\n  return async function(dispatch) {\n    try {\n      const profile = await createProfile(profileFormData);\n      dispatch(doCreateOrUpdateProfile(profile.data));\n      dispatch(doSetRemoveNotification(edit ? \"Profile Updated\" : \"Profile Created\", \"success\"));\n\n      !edit && history.push(\"/dashboard\"); // Redirect to dashboard upon creation of a profile\n    } catch (err) {\n      const errors = err.response.data.errors;\n      if (errors) {\n        errors.forEach(error => dispatch(doSetRemoveNotification(error.message || error.msg, \"danger\")));\n      }\n      dispatch(doSetProfileError({ message: err.response.statusText, status: err.response.status }));\n    }\n  }\n};\n\nconst doAddExperienceWithErrorCheck = (expFormData, history) => {\n  return async function(dispatch) {\n    try {\n      const profile = await addExperience(expFormData);\n      dispatch(doSetAddExperience(profile.data));\n      dispatch(doSetRemoveNotification(\"Experience Added\", \"success\"));\n\n      history.push(\"/dashboard\");\n    } catch (err) {\n      const errors = err.response.data.errors;\n      if (errors) {\n        errors.forEach(error => dispatch(doSetRemoveNotification(error.message || error.msg, \"danger\")));\n      }\n    }\n  }\n};\n\nconst doAddEducationWithErrorCheck = (eduFormData, history) => {\n  return async function(dispatch) {\n    try {\n      const profile = await addEducation(eduFormData);\n      dispatch(doSetAddEducation(profile.data));\n      dispatch(doSetRemoveNotification(\"Experience Added\", \"success\"));\n\n      history.push(\"/dashboard\");\n    } catch (err) {\n      const errors = err.response.data.errors;\n      if (errors) {\n        errors.forEach(error => dispatch(doSetRemoveNotification(error.message || error.msg, \"danger\")));\n      }\n    }\n  }\n};\n\nconst doRemoveExperienceWithErrorCheck = expid => {\n  return async function(dispatch) {\n    try {\n      const profile = await removeExperience(expid);\n      dispatch(doSetRemoveExperience(profile.data));\n      dispatch(doGetProfileWithErrorCheck());\n      dispatch(doSetRemoveNotification(\"Experience Deleted\", \"success\"));\n    } catch (err) {\n      dispatch(doSetProfileError({ message: err.response.statusText, status: err.response.status }));\n    }\n  }\n};\n\nconst doRemoveEducationWithErrorCheck = eduid => {\n  return async function(dispatch) {\n    try {\n      const profile = await removeEducation(eduid);\n      dispatch(doSetRemoveEducation(profile.data));\n      dispatch(doGetProfileWithErrorCheck());\n      dispatch(doSetRemoveNotification(\"Education Deleted\", \"success\"));\n    } catch (err) {\n      dispatch(doSetProfileError({ message: err.response.statusText, status: err.response.status }));\n    }\n  }\n};\n\nconst doDeleteAccountWithErrorCheck = () => {\n  return async function(dispatch) {\n    if (window.confirm(\"ARE YOU SURE? THIS CANNOT BE UNDONE!\")) {\n      try {\n        await deleteAccount();\n        dispatch(doDeleteAccount());\n        dispatch(doClearProfile());\n        dispatch(doSetRemoveNotification(\"Account Permanently Deleted\"));\n      } catch (err) {\n        dispatch(doSetProfileError({ message: err.response.statusText, status: err.response.status }));\n      }\n    }\n  }\n};\n\nconst doGetGithubReposWithErrorCheck = username => {\n  return async function(dispatch) {\n    try {\n      const repos = await getGithubRepos(username);\n      dispatch(doGetGithubRepos(repos.data));\n    } catch (err) {\n      dispatch(doSetProfileError({ message: err.response.statusText, status: err.response.status }));\n    }\n  }\n};\n\nexport default doGetProfileWithErrorCheck;\nexport {\n  doGetProfilesWithErrorCheck, doGetProfileByUseridWithErrorCheck,\n  doCreateOrUpdateProfileWithErrorCheck, doAddExperienceWithErrorCheck,\n  doAddEducationWithErrorCheck, doRemoveExperienceWithErrorCheck,\n  doRemoveEducationWithErrorCheck, doDeleteAccountWithErrorCheck,\n  doGetGithubReposWithErrorCheck\n};\n","import React, { Fragment } from \"react\";\n\nconst Spinner = () =>\n  <Fragment>\n    <div style = {{ textAlign: \"center\" }}>\n      <i className = \"fas fa-spinner fa-spin\"></i>\n    </div>\n  </Fragment>\n\nexport default Spinner;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst DashboardActions = () =>\n  <div className = \"dash-buttons\">\n    <Link to = \"/profile/edit\" className = \"btn btn-light\">\n      <i className = \"fas fa-user-circle text-primary\"></i>\n      Edit Profile\n    </Link>\n    <Link to = \"/experience/add\" className = \"btn btn-light\">\n      <i className = \"fab fa-black-tie text-primary\"></i>\n      Add Experience\n    </Link>\n    <Link to = \"/education/add\" className = \"btn btn-light\">\n      <i className = \"fas fa-graduation-cap text-primary\"></i>\n      Add Education\n    </Link>\n  </div>\n\nexport default DashboardActions;\n","import React, { Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport Moment from \"react-moment\";\nimport { doRemoveExperienceWithErrorCheck } from \"../../thunks/profile\";\n\nconst Experience = ({ experience, onRemoveExperience }) => {\n  const experiences = experience;\n\n  return (\n    <Fragment>\n      <h2 className = \"my-2\"> Experience Credentials </h2>\n      <table className = \"table\">\n        <thead>\n          <tr>\n            <th> Company </th>\n            <th className = \"hide-sm\"> Title </th>\n            <th className = \"hide-sm\"> Years </th>\n            <th />\n          </tr>\n        </thead>\n        <tbody>\n          {experiences.map(exp =>\n            <tr key = { exp._id }>\n              <td>{exp.company}</td>\n              <td className = \"hide-sm\">{exp.title}</td>\n              <td>\n                <Moment format = \"YYYY/MM/DD\">{exp.from}</Moment> -{\" \"}\n                {exp.to === null\n                  ? \"Now\"\n                  : <Moment format = \"YYYY/MM/DD\">{exp.to}</Moment>\n                }\n              </td>\n              <td>\n                <button\n                className = \"btn btn-danger\"\n                onClick = { () => { onRemoveExperience(exp._id) } }\n                >\n                  Delete\n                </button>\n              </td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </Fragment>\n  );\n};\n\nExperience.propTypes = {\n  experiences: PropTypes.array,\n  onRemoveExperience: PropTypes.func.isRequired\n};\n\nconst mapDispatchToPropsExperience = dispatch => ({\n  onRemoveExperience: expid =>\n    dispatch(doRemoveExperienceWithErrorCheck(expid))\n});\n\nconst ConnectedExperience = connect(null, mapDispatchToPropsExperience)(Experience);\n\nexport default ConnectedExperience;\n","import React, { Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport Moment from \"react-moment\";\nimport { doRemoveEducationWithErrorCheck } from \"../../thunks/profile\";\n\nconst Education = ({ education, onRemoveEducation }) => {\n  const educations = education;\n\n  return (\n    <Fragment>\n      <h2 className = \"my-2\"> Education Credentials </h2>\n      <table className = \"table\">\n        <thead>\n          <tr>\n            <th> School </th>\n            <th className = \"hide-sm\"> Degree </th>\n            <th className = \"hide-sm\"> Years </th>\n            <th />\n          </tr>\n        </thead>\n        <tbody>\n          {educations.map(edu =>\n            <tr key = { edu._id }>\n              <td>{edu.school}</td>\n              <td className = \"hide-sm\">{edu.degree}</td>\n              <td>\n                <Moment format = \"YYYY/MM/DD\">{edu.from}</Moment> -{\" \"}\n                {edu.to === null\n                  ? \"Now\"\n                  : <Moment format = \"YYYY/MM/DD\">{edu.to}</Moment>\n                }\n              </td>\n              <td>\n                <button\n                className = \"btn btn-danger\"\n                onClick = { () => { onRemoveEducation(edu._id) } }\n                >\n                  Delete\n                </button>\n              </td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </Fragment>\n  );\n};\n\nEducation.propTypes = {\n  educations: PropTypes.array,\n  onRemoveEducation: PropTypes.func.isRequired\n};\n\nconst mapDispatchToPropsEducation = dispatch => ({\n  onRemoveEducation: eduid =>\n    dispatch(doRemoveEducationWithErrorCheck(eduid))\n});\n\nconst ConnectedEducation = connect(null, mapDispatchToPropsEducation)(Education);\n\nexport default ConnectedEducation;\n","import React, { Fragment, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport doGetProfileWithErrorCheck from  \"../../thunks/profile\";\nimport Spinner from \"../layout/Spinner\";\nimport DashboardActions from \"./DashboardActions\";\nimport Experience from \"./Experience\";\nimport Education from \"./Education\";\nimport { doDeleteAccountWithErrorCheck } from \"../../thunks/profile\";\n\nconst Dashboard = ({ onGetProfile, onDeleteAcount, auth : { user }, profile: { profile, isLoading } }) => {\n  useEffect(() => {\n    onGetProfile();\n  }, [onGetProfile]);\n\n  return (\n    isLoading && profile === null\n      ? <Spinner/>\n      : <Fragment>\n        <div>\n          <h1 className = \"large text-primary\"> Dashboard </h1>\n          <p className = \"lead\">\n            <i className = \"fas fa-user\" style = {{ marginRight: \"5px\" }}></i>\n            Welcome { user && user.name }\n          </p>\n        </div>\n\n        { profile !== null\n          ? <Fragment>\n              <DashboardActions />\n              <Experience experience = { profile.experience } />\n              <Education education = {profile.education} />\n\n              <div className = \"my-2\">\n                <button className = \"btn btn-danger\" onClick = { onDeleteAcount }>\n                  <i className = \"fas fa-user-minus\"></i> Delete My Account\n                </button>\n              </div>\n            </Fragment>\n          : <Fragment>\n              <p>You have no profile setup. Create one to interact with other developers</p>\n              <Link to = \"/profile/create\" className = \"btn btn-primary my-1\">\n                Create Profile\n              </Link>\n            </Fragment>\n        }\n      </Fragment>\n  );\n};\n\nDashboard.propTypes = {\n  onGetProfile: PropTypes.func.isRequired,\n  onDeleteAcount: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  profile: PropTypes.object.isRequired\n};\n\nconst mapSateToPropsDashboard = state => ({\n  auth: state.authState,\n  profile: state.profileState\n});\n\nconst mapDispatchToPropsDashboard = dispatch => ({\n  onGetProfile: () => dispatch(doGetProfileWithErrorCheck()),\n  onDeleteAcount: () => dispatch(doDeleteAccountWithErrorCheck())\n});\n\nconst ConnectedDashboard = connect(mapSateToPropsDashboard, mapDispatchToPropsDashboard)(Dashboard);\n\nexport default ConnectedDashboard;\n","import React, { Fragment, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { doCreateOrUpdateProfileWithErrorCheck } from \"../../../thunks/profile\";\n\nconst CreateProfile = ({ onCreateProfile, history }) => {\n  const [profileFormData, onSetProfileFormData] = useState({\n    company: \"\",\n    website: \"\",\n    location: \"\",\n    bio: \"\",\n    status: \"\",\n    githubusername: \"\",\n    skills: \"\",\n    twitter: \"\",\n    linkedin: \"\",\n    facebook: \"\",\n    instagram: \"\",\n    youtube: \"\"\n  });\n\n  const [diplaySocialLinks, onToggleSocialLinks] = useState(false);\n  \n  const onToggle = () => onToggleSocialLinks(!diplaySocialLinks);\n\n  const {\n    company,\n    website,\n    location,\n    bio,\n    status,\n    githubusername,\n    skills,\n    twitter,\n    linkedin,\n    facebook,\n    instagram,\n    youtube\n  } = profileFormData;\n\n  const onChange = e => onSetProfileFormData({\n    ...profileFormData,\n    [e.target.name]: e.target.value\n  });\n\n  const onSubmit = e => {\n    e.preventDefault();\n    onCreateProfile(profileFormData, history);\n  };\n\n  return (\n    <Fragment>\n      <h1 className = \"large text-primary\">\n        Create Your Profile\n      </h1>\n      <p className = \"lead\">\n        <i className = \"fas fa-user\"></i>\n        Let's get some information to make your profile stand out\n      </p>\n      <small>* = required field</small>\n      <form className = \"form\" onSubmit = { e => onSubmit(e) }>\n        <div className = \"form-group\">\n          <select name = \"status\" value= {status} onChange = { e => onChange(e) } >\n            <option value = \"0\"> * Select Professional Status </option>\n            <option value = \"Full Stack Developer\"> Full Stack Developer </option>\n            <option value = \"UX/UI Developer\"> UX/UI Developer </option>\n            <option value = \"Frontend Developer\"> Frontend Developer </option>\n            <option value = \"Backend Developer\"> Backend Developer </option>\n            <option value = \"Software Developer\"> Software Developer </option>\n            <option value = \"Junior Developer\"> Junior Developer </option>\n            <option value = \"Senior Developer\"> Senior Developer </option>\n            <option value = \"DevOps Engineer\"> DevOps Engineer </option>\n            <option value = \"Manager\"> Manager </option>\n            <option value = \"Student or Learning\"> Student or Learning </option>\n            <option value = \"Instructor\"> Instructor or Teacher </option>\n            <option value = \"Intern\"> Intern </option>\n            <option value = \"Other\"> Other </option>\n          </select>\n          <small className = \"form-text\">\n            Give us an idea of where you are at in your career\n          </small>\n        </div>\n        <div className = \"form-group\">\n          <input type = \"text\" placeholder = \"Company\" name = \"company\"\n          value = {company} onChange = { e => onChange(e) } />\n          <small className = \"form-text\">\n            Could be your own company or one you work for\n          </small>\n        </div>\n        <div className = \"form-group\">\n          <input type = \"text\" placeholder = \"Website\" name = \"website\"\n          value = {website} onChange = { e => onChange(e) } />\n          <small className = \"form-text\">\n            Could be your own or a company website\n          </small>\n        </div>\n        <div className = \"form-group\">\n          <input type = \"text\" placeholder = \"Location\" name = \"location\" \n          value = {location} onChange = { e => onChange(e) }/>\n          <small className = \"form-text\">\n            City & state suggested (eg. Boston, MA)\n          </small>\n        </div>\n        <div className = \"form-group\">\n          <input type = \"text\" placeholder = \"* Skills\" name = \"skills\" \n          value = {skills} onChange = { e => onChange(e) }/>\n          <small className = \"form-text\">\n            Please use comma separated values (eg. HTML,CSS,JavaScript,PHP)\n          </small>\n        </div>\n        <div className = \"form-group\">\n          <input\n            type = \"text\"\n            placeholder = \"Github Username\"\n            name = \"githubusername\"\n            value = {githubusername} onChange = { e => onChange(e) }/>\n          <small className = \"form-text\">\n            If you want your latest repos and a Github link, include your username\n          </small>\n        </div>\n        <div className=\"form-group\">\n          <textarea placeholder=\"A short bio of yourself\" name=\"bio\"\n          value = {bio} onChange = { e => onChange(e) }></textarea>\n          <small className = \"form-text\">\n            Tell us a little about yourself\n          </small>\n        </div>\n\n        <div className = \"my-2\">\n          <button onClick = { () => onToggle() }\n          type = \"button\" className = \"btn btn-light\">\n            Add Social Network Links\n          </button>\n          <span>Optional</span>\n        </div>\n\n        { diplaySocialLinks &&\n        <Fragment>\n          <div className=\"form-group social-input\">\n            <i className=\"fab fa-twitter fa-2x\"></i>\n            <input type=\"text\" placeholder=\"Twitter URL\" name=\"twitter\" \n            value = {twitter} onChange = { e => onChange(e) }/>\n          </div>\n\n          <div className=\"form-group social-input\">\n            <i className=\"fab fa-facebook fa-2x\"></i>\n            <input type=\"text\" placeholder=\"Facebook URL\" name=\"facebook\" \n            value = {facebook} onChange = { e => onChange(e) }/>\n          </div>\n\n          <div className=\"form-group social-input\">\n            <i className=\"fab fa-youtube fa-2x\"></i>\n            <input type=\"text\" placeholder=\"YouTube URL\" name=\"youtube\" \n            value = {youtube} onChange = { e => onChange(e) }/>\n          </div>\n\n          <div className=\"form-group social-input\">\n            <i className=\"fab fa-linkedin fa-2x\"></i>\n            <input type=\"text\" placeholder=\"Linkedin URL\" name=\"linkedin\" \n            value = {linkedin} onChange = { e => onChange(e) }/>\n          </div>\n\n          <div className=\"form-group social-input\">\n            <i className=\"fab fa-instagram fa-2x\"></i>\n            <input type=\"text\" placeholder=\"Instagram URL\" name=\"instagram\" \n            value = {instagram} onChange = { e => onChange(e) }/>\n          </div>\n        </Fragment> }\n\n        <input type=\"submit\" className=\"btn btn-primary my-1\" />\n        <Link className = \"btn btn-light my-1\" to = \"/dashboard\">Go Back</Link>\n      </form>\n    </Fragment>\n  );\n};\n\nCreateProfile.propTypes = {\n  onCreateProfile: PropTypes.func.isRequired,\n  history: PropTypes.object.isRequired\n};\n\nconst mapDispatchToPropsCreateProfile = dispatch => ({\n  onCreateProfile: (profileFormData, history) =>\n    dispatch(doCreateOrUpdateProfileWithErrorCheck(profileFormData, history))\n});\n\nconst ConnectedCreateProfile = connect(null, mapDispatchToPropsCreateProfile)(withRouter(CreateProfile));\n\nexport default ConnectedCreateProfile;\n","import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { doCreateOrUpdateProfileWithErrorCheck } from \"../../../thunks/profile\";\nimport doGetProfileWithErrorCheck from \"../../../thunks/profile\";\n\nclass EditProfile extends Component {\n  _isMounted = false;\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      company: \"\",\n      website: \"\",\n      location: \"\",\n      bio: \"\",\n      status: \"\",\n      githubusername: \"\",\n      skills: \"\",\n      twitter: \"\",\n      linkedin: \"\",\n      facebook: \"\",\n      instagram: \"\",\n      youtube: \"\",\n      diplaySocialLinks: false\n    };\n\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.onToggle = this.onToggle.bind(this);\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    const { profile: { profile, isLoading } } = this.props;\n\n    this._isMounted && this.props.onGetCurrentProfile();\n\n    this.setState({\n      company: isLoading ? \"\" : profile.company,\n      website: isLoading ? \"\" : profile.website,\n      location: isLoading ? \"\" : profile.location,\n      bio: isLoading ? \"\" : profile.bio,\n      status: isLoading ? \"\" : profile.status,\n      githubusername: isLoading ? \"\" : profile.githubusername,\n      skills: isLoading ? \"\" : profile.skills.join(\",\"),\n      twitter: isLoading ? \"\" : profile.twitter,\n      linkedin: isLoading ? \"\" : profile.linkedin,\n      facebook: isLoading ? \"\" : profile.facebook,\n      instagram: isLoading ? \"\" : profile.instagram,\n      youtube: isLoading ? \"\" : profile.youtube\n    });\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    const { company, website, location, bio, status, githubusername,\n      skills, twitter, linkedin, facebook, instagram, youtube\n    } = this.state;\n    const profileFormData = { company, website, location, bio, status, githubusername,\n      skills, twitter, linkedin, facebook, instagram, youtube };\n    const { history } = this.props;\n\n    this.props.onCreateProfile(profileFormData, history);\n  }\n\n  onChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  }\n\n  onToggle() {\n    this.setState({ diplaySocialLinks: !this.state.diplaySocialLinks });\n  }\n\n  render() {\n    const { company, website, location, bio, status, githubusername,\n      skills, twitter, linkedin, facebook, instagram, youtube,\n      diplaySocialLinks\n    } = this.state;\n\n    return(\n      <Fragment>\n        <h1 className = \"large text-primary\">\n          Update Your Profile\n        </h1>\n        <p className = \"lead\">\n          <i className = \"fas fa-user\"></i>\n          Let's get some information to make your profile stand out\n        </p>\n        <small>* = required field</small>\n        <form className = \"form\" onSubmit = { this.onSubmit }>\n          <div className = \"form-group\">\n            <select name = \"status\" value= {status} onChange = { this.onChange } >\n              <option value = \"0\"> * Select Professional Status </option>\n              <option value = \"Full Stack Developer\"> Full Stack Developer </option>\n              <option value = \"UX/UI Developer\"> UX/UI Developer </option>\n              <option value = \"Frontend Developer\"> Frontend Developer </option>\n              <option value = \"Backend Developer\"> Backend Developer </option>\n              <option value = \"Software Developer\"> Software Developer </option>\n              <option value = \"Junior Developer\"> Junior Developer </option>\n              <option value = \"Senior Developer\"> Senior Developer </option>\n              <option value = \"DevOps Engineer\"> DevOps Engineer </option>\n              <option value = \"Manager\"> Manager </option>\n              <option value = \"Student or Learning\"> Student or Learning </option>\n              <option value = \"Instructor\"> Instructor or Teacher </option>\n              <option value = \"Intern\"> Intern </option>\n              <option value = \"Other\"> Other </option>\n            </select>\n            <small className = \"form-text\">\n              Give us an idea of where you are at in your career\n            </small>\n          </div>\n          <div className = \"form-group\">\n            <input type = \"text\" placeholder = \"Company\" name = \"company\"\n            value = {company} onChange = { this.onChange } />\n            <small className = \"form-text\">\n              Could be your own company or one you work for\n            </small>\n          </div>\n          <div className = \"form-group\">\n            <input type = \"text\" placeholder = \"Website\" name = \"website\"\n            value = {website} onChange = { this.onChange } />\n            <small className = \"form-text\">\n              Could be your own or a company website\n            </small>\n          </div>\n          <div className = \"form-group\">\n            <input type = \"text\" placeholder = \"Location\" name = \"location\" \n            value = {location} onChange = { this.onChange }/>\n            <small className = \"form-text\">\n              City & state suggested (eg. Boston, MA)\n            </small>\n          </div>\n          <div className = \"form-group\">\n            <input type = \"text\" placeholder = \"* Skills\" name = \"skills\" \n            value = {skills} onChange = { this.onChange }/>\n            <small className = \"form-text\">\n              Please use comma separated values (eg. HTML,CSS,JavaScript,PHP)\n            </small>\n          </div>\n          <div className = \"form-group\">\n            <input\n              type = \"text\"\n              placeholder = \"Github Username\"\n              name = \"githubusername\"\n              value = {githubusername} onChange = { this.onChange }/>\n            <small className = \"form-text\">\n              If you want your latest repos and a Github link, include your username\n            </small>\n          </div>\n          <div className=\"form-group\">\n            <textarea placeholder=\"A short bio of yourself\" name=\"bio\"\n            value = {bio} onChange = { this.onChange }></textarea>\n            <small className = \"form-text\">\n              Tell us a little about yourself\n            </small>\n          </div>\n\n          <div className = \"my-2\">\n            <button onClick = { this.onToggle }\n            type = \"button\" className = \"btn btn-light\">\n              Add Social Network Links\n            </button>\n            <span>Optional</span>\n          </div>\n\n          { diplaySocialLinks &&\n          <Fragment>\n            <div className=\"form-group social-input\">\n              <i className=\"fab fa-twitter fa-2x\"></i>\n              <input type=\"text\" placeholder=\"Twitter URL\" name=\"twitter\" \n              value = {twitter} onChange = { this.onChange }/>\n            </div>\n\n            <div className=\"form-group social-input\">\n              <i className=\"fab fa-facebook fa-2x\"></i>\n              <input type=\"text\" placeholder=\"Facebook URL\" name=\"facebook\" \n              value = {facebook} onChange = { this.onChange }/>\n            </div>\n\n            <div className=\"form-group social-input\">\n              <i className=\"fab fa-youtube fa-2x\"></i>\n              <input type=\"text\" placeholder=\"YouTube URL\" name=\"youtube\" \n              value = {youtube} onChange = { this.onChange }/>\n            </div>\n\n            <div className=\"form-group social-input\">\n              <i className=\"fab fa-linkedin fa-2x\"></i>\n              <input type=\"text\" placeholder=\"Linkedin URL\" name=\"linkedin\" \n              value = {linkedin} onChange = { this.onChange }/>\n            </div>\n\n            <div className=\"form-group social-input\">\n              <i className=\"fab fa-instagram fa-2x\"></i>\n              <input type=\"text\" placeholder=\"Instagram URL\" name=\"instagram\" \n              value = {instagram} onChange = { this.onChange }/>\n            </div>\n          </Fragment> }\n\n          <input type=\"submit\" className=\"btn btn-primary my-1\" />\n          <Link className = \"btn btn-light my-1\" to = \"/dashboard\">Cancel</Link>\n        </form>\n      </Fragment>\n    );\n  }\n}\n\nEditProfile.propTypes = {\n  onCreateProfile: PropTypes.func.isRequired,\n  onGetCurrentProfile: PropTypes.func.isRequired,\n  history: PropTypes.object.isRequired,\n  profile: PropTypes.object.isRequired\n};\n\nconst mapDispatchToPropsEditProfile = dispatch => ({\n  onCreateProfile: (profileFormData, history) =>\n    dispatch(doCreateOrUpdateProfileWithErrorCheck(profileFormData, history, true)),\n  onGetCurrentProfile: () =>\n    dispatch(doGetProfileWithErrorCheck())\n});\n\nconst mapStateToPropsEditProfile = state => ({\n  profile: state.profileState\n});\n\nconst ConnectedEditProfile = connect(mapStateToPropsEditProfile, mapDispatchToPropsEditProfile)(withRouter(EditProfile));\n\nexport default ConnectedEditProfile;\n","import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes  from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport { withRouter } from \"react-router\";\nimport { doAddExperienceWithErrorCheck } from \"../../../thunks/profile\";\n\nclass AddExperience extends Component {\n  constructor (props) {\n    super(props);\n\n    this.state = {\n      title: \"\",\n      company: \"\",\n      location: \"\",\n      from: \"\",\n      to: \"\",\n      current: false,\n      description: \"\"\n    };\n\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.onChecked = this.onChecked.bind(this);\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    const { title, company, location, from, to, current, description } = this.state;\n    const expFormData = { title, company, location, from, to, current, description };\n    const { history } = this.props;\n    this.props.onAddExperience(expFormData, history);\n  }\n\n  onChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  onChecked() {\n    this.setState({\n      current: !this.state.current\n    });\n  }\n\n  render() {\n    const { title, company, location, from, to, current, description } = this.state;\n\n    return (\n      <Fragment>\n        <h1 className = \"large text-primary\">\n          Add An Experience\n        </h1>\n        <p className = \"lead\">\n          <i className = \"fas fa-code-branch\"></i>\n          Add any developer/programming positions that you have had in the past\n        </p>\n        <small>* = required field</small>\n        <form className = \"form\" onSubmit = { this.onSubmit }>\n          <div className = \"form-group\">\n            <input type = \"text\" placeholder = \"* Job Title\" name = \"title\" required\n            value = { title } onChange = { this.onChange } />\n          </div>\n          <div className = \"form-group\">\n            <input type = \"text\" placeholder = \"* Company\" name = \"company\" required\n            value = { company } onChange = { this.onChange } />\n          </div>\n          <div className = \"form-group\">\n            <input type = \"text\" placeholder = \"Location\" name = \"location\"\n            value = { location } onChange = { this.onChange } />\n          </div>\n          <div className = \"form-group\">\n            <h4>From Date</h4>\n            <input type = \"date\" name = \"from\"\n            value = { from } onChange = { this.onChange } />\n          </div>\n          <div className = \"form-group\">\n            <p>\n              <input type = \"checkbox\" name = \"current\" \n              value = { current } onChange = { this.onChecked } />\n              Current Job\n            </p>\n          </div>\n          <div className = \"form-group\">\n            <h4>To Date</h4>\n            <input type = \"date\" name = \"to\" value = { to } \n            onChange = { this.onChange } disabled = { current ? \"disabled\" : \"\" } />\n          </div>\n          <div className = \"form-group\">\n            <textarea name = \"description\" cols=\"30\" rows=\"5\" placeholder = \"Job Description\"\n            value = { description } onChange = { this.onChange }></textarea>\n          </div>\n          <input type = \"submit\" className = \"btn btn-primary my-1\" />\n          <Link className = \"btn btn-light my-1\" to = \"/dashboard\"> Go Back </Link>\n        </form>\n      </Fragment>\n    );\n  }\n}\n\nAddExperience.propTypes  = {\n  onAddExperience: PropTypes.func.isRequired,\n  history: PropTypes.object.isRequired\n}\n\nconst mapDispatchToPropsAddExperience = dispatch => ({\n  onAddExperience: (expFormData, history) =>\n    dispatch(doAddExperienceWithErrorCheck(expFormData, history))\n});\n\nconst ConnectedAddExperience = connect(null, mapDispatchToPropsAddExperience)(withRouter(AddExperience));\n\nexport default ConnectedAddExperience;","import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes  from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport { withRouter } from \"react-router\";\nimport { doAddEducationWithErrorCheck } from \"../../../thunks/profile\";\n\nclass AddEducation extends Component {\n  constructor (props) {\n    super(props);\n\n    this.state = {\n      school: \"\",\n      degree: \"\",\n      fieldofstudy: \"\",\n      from: \"\",\n      to: \"\",\n      current: false,\n      description: \"\"\n    };\n\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.onChecked = this.onChecked.bind(this);\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    const { school, degree, fieldofstudy, from, to, current, description } = this.state;\n    const eduFormData = { school, degree, fieldofstudy, from, to, current, description };\n    const { history } = this.props;\n    this.props.onAddEducation(eduFormData, history);\n  }\n\n  onChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  onChecked() {\n    this.setState({\n      current: !this.state.current\n    });\n  }\n\n  render() {\n    const { school, degree, fieldofstudy, from, to, current, description } = this.state;\n\n    return (\n      <Fragment>\n        <h1 className = \"large text-primary\">\n          Add Your Education\n        </h1>\n        <p className = \"lead\">\n          <i className = \"fas fa-graduation-cap\"></i> Add any school, bootcamp, etc that\n          you have attended\n        </p>\n        <small>* = required field</small>\n        <form className = \"form\" onSubmit = { this.onSubmit }>\n          <div className = \"form-group\">\n            <input type = \"text\" placeholder = \"* School or Bootcamp\" name = \"school\"\n            value = { school } onChange = { this.onChange } required />\n          </div>\n          <div className = \"form-group\">\n            <input type = \"text\" placeholder = \"* Degree or Certificate\" name = \"degree\"\n            value = { degree } onChange = { this.onChange } required />\n          </div>\n          <div className = \"form-group\">\n            <input type = \"text\" placeholder = \"Field Of Study\" name = \"fieldofstudy\"\n            value = { fieldofstudy } onChange = { this.onChange } required />\n          </div>\n          <div className = \"form-group\">\n            <h4>From Date</h4>\n            <input type = \"date\" name = \"from\" \n            value = { from } onChange = { this.onChange } required />\n          </div>\n          <div className = \"form-group\">\n            <p>\n              <input type = \"checkbox\" name = \"current\" \n              value = { current } onChange = { this.onChecked } />\n              Current School or Bootcamp\n            </p>\n          </div>\n          <div className = \"form-group\">\n            <h4>To Date</h4>\n            <input type = \"date\" name = \"to\" value = { to }\n            onChange = { this.onChange }  disabled = { current ? \"disabled\" : \"\" } />\n          </div>\n          <div className = \"form-group\">\n            <textarea name = \"description\" cols=\"30\" rows=\"5\" placeholder = \"Program Description\"\n            value = { description } onChange = { this.onChange } required>\n            </textarea>\n          </div>\n          <input type = \"submit\" className = \"btn btn-primary my-1\" />\n          <Link className = \"btn btn-light my-1\" to = \"/dashboard\"> Go Back </Link>\n        </form>\n      </Fragment>\n    );\n  }\n}\n\nAddEducation.propTypes  = {\n  onAddEducation: PropTypes.func.isRequired,\n  history: PropTypes.object.isRequired\n}\n\nconst mapDispatchToPropsAddEducation = dispatch => ({\n  onAddEducation: (eduFormData, history) =>\n    dispatch(doAddEducationWithErrorCheck(eduFormData, history))\n});\n\nconst ConnectedAddEducation = connect(null, mapDispatchToPropsAddEducation)(withRouter(AddEducation));\n\nexport default ConnectedAddEducation;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n\nconst ProfileItem = ({ profile: { userid: {_id, name, avatar}, status,  company, location, skills} }) => (\n  <div className = \"profile bg-light\">\n    <img src = {avatar} alt = \"\" className = \"round-img\"/>\n    <div>\n      <h2>{name}</h2>\n      <p>{status} {company && <span>at {company}</span>}</p>\n      <p className = \"my-1\">{location && <span>{location}</span>}</p>\n      <Link to = {`/profile/find/${_id}`} className = \"btn btn-primary\">\n        View Profile\n      </Link>\n    </div>\n    <ul>\n      {skills.slice(0, 4).map((skill, index) => (\n        <li key = {index} className = \"text-primary\">\n          <i className = \"fas fa-check\"></i> {skill}\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nProfileItem.propTypes = {\n  profile: PropTypes.object.isRequired\n};\n\nexport default ProfileItem;\n","import React, { Fragment, useEffect } from \"react\";\nimport { connect } from \"react-redux\"\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport Spinner from \"../layout/Spinner\";\nimport ProfileItem from \"./ProfileItem\";\nimport { doGetProfilesWithErrorCheck } from \"../../thunks/profile\";\n\n\nconst Profiles = ({ onGetProfiles, profiles: { profiles, isLoading } }) => {\n  useEffect(() => {\n    onGetProfiles();\n  }, [onGetProfiles]);\n\n  return (\n    <Fragment>\n      {isLoading\n        ? <Spinner/>\n        : <Fragment>\n          <h1 className = \"large text-primary\">Developers</h1>\n          <p className = \"lead\">\n            <i className = \"fab fa-connectdevelop \"></i> Browse and connect with Developers\n          </p>\n          <div className = \"profiles\">\n            {profiles.length > 0\n              ? (profiles.map(profile => (\n                <ProfileItem\n                  key = { profile._id }\n                  profile = { profile }\n                />\n              )))\n              : <h4>\n                  No profile created yet. Be the first to create one <br/>\n                  <Link to = \"/signup\" className = \"btn btn-primary my-1\">\n                    Create Profile\n                  </Link>\n                </h4>\n            }\n          </div>\n        </Fragment>\n      }\n    </Fragment>\n  );\n};\n\nProfiles.propTypes = {\n  onGetProfiles: PropTypes.func.isRequired,\n  profiles: PropTypes.object.isRequired\n};\n\nconst mapStateToPropsProfiles = state => ({\n  profiles: state.profileState\n});\n\nconst mapDispatchToPropsProfiles = dispatch => ({\n  onGetProfiles: () => dispatch(doGetProfilesWithErrorCheck())\n});\n\nconst ConnectedProfiles = connect(mapStateToPropsProfiles, mapDispatchToPropsProfiles)(Profiles);\n\nexport default ConnectedProfiles;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst ProfileTop = ({ profile: { status, company, location, website, social,\n  userid: { name, avatar } }}) => {\n  return (\n    <div className = \"profile-top bg-primary p-2\">\n      <img className = \"round-img my-1\" alt = \"\" src = {avatar} />\n      <h1 className = \"large\">{name}</h1>\n      <p className = \"lead\">{status} {company && <span>at {company}</span>}</p>\n      <p>{location}</p>\n      <div className = \"icons my-1\">\n        {website &&\n          <a href = {website} target=\"_blank\" rel=\"noopener noreferrer\">\n            <i className = \"fas fa-globe fa-2x\"></i>\n          </a>\n        }\n        {social && social.twitter &&\n          (<a href = { social.twitter } target=\"_blank\" rel=\"noopener noreferrer\">\n            <i className = \"fab fa-twitter fa-2x\"></i>\n          </a>)\n        }\n        {social && social.facebook &&\n          (<a href = {social.facebook} target=\"_blank\" rel=\"noopener noreferrer\">\n            <i className = \"fab fa-facebook fa-2x\"></i>\n          </a>)\n        }\n        {social && social.linkedin &&\n          (<a href = {social.linkedin} target=\"_blank\" rel=\"noopener noreferrer\">\n            <i className = \"fab fa-linkedin fa-2x\"></i>\n          </a>)\n        }\n        {social && social.youtube &&\n          (<a href = {social.youtube} target=\"_blank\" rel=\"noopener noreferrer\">\n            <i className = \"fab fa-youtube fa-2x\"></i>\n            </a>)\n        }\n        {social && social.instagram && \n          (<a href = {social.instagram} target=\"_blank\" rel=\"noopener noreferrer\">\n            <i className = \"fab fa-instagram fa-2x\"></i>\n          </a>)\n        }\n      </div>\n    </div>\n  );\n};\n\nProfileTop.propTypes = {\n  profile: PropTypes.object.isRequired\n};\n\nexport default ProfileTop;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst ProfileAbout = ({ profile: { bio, skills, userid: {name} } }) =>\n  <div className = \"profile-about bg-light p-2\">\n    <Fragment>\n      <h2 className = \"text-primary\">{name.trim().split(\" \")[0]}'s Bio</h2>\n      <p>{bio}</p>\n      <div className = \"line\"></div>\n    </Fragment>\n    <h2 className = \"text-primary\">Skill Set</h2>\n     <div className = \"skills\">\n      {skills.map((skill, index) => (\n        <div key = {index} className   = \"p-1\">\n          <i className = \"fas fa-check\"></i> {skill}\n        </div>\n      ))}\n    </div>\n  </div>\n\nProfileAbout.propTypes = {\n  profile: PropTypes.object.isRequired\n};\n\nexport default ProfileAbout;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Moment from \"react-moment\";\n\nconst ProfileExperience = ({ experience: { company, title, location, current, to, from, description } }) =>\n  <div>\n    <h3 className = \"text-dark\">{company}</h3>\n    <p>\n      <Moment format = \"YYYY/MM/DD\">{from}</Moment> -{\" \"}\n      {!to\n        ? \"Now\"\n        : <Moment format = \"YYYY/MM/DD\">{to}</Moment>\n      }\n    </p>\n    <p>\n      <b>Position: </b> {title}\n    </p>\n    <p>\n      <b>Description: </b> {description}\n    </p>\n  </div>;\n\nProfileExperience.propTypes = {\n  experience: PropTypes.object.isRequired\n}\n\nexport default ProfileExperience;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Moment from \"react-moment\";\n\nconst ProfileEducation = ({ education: { school, degree, fieldofstudy, current, to, from, description } }) =>\n  <div>\n    <h3 className = \"text-dark\">{school}</h3>\n    <p>\n      <Moment format = \"YYYY/MM/DD\">{from}</Moment> -{\" \"}\n      {!to\n        ? \"Now\"\n        : <Moment format = \"YYYY/MM/DD\">{to}</Moment>\n      }\n    </p>\n    <p>\n      <b>Degree: </b> {degree}\n    </p>\n    <p>\n      <b>Field Of Study: </b> {fieldofstudy}\n    </p>\n    <p>\n      <b>Description: </b> {description}\n    </p>\n  </div>;\n\nProfileEducation.propTypes = {\n  education: PropTypes.object.isRequired\n}\n\nexport default ProfileEducation;\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport Spinner from \"../layout/Spinner\";\nimport { doGetGithubReposWithErrorCheck } from \"../../thunks/profile\";\n\nconst ProfileGithub = ({ username, onGetGithubRepos, repos }) => {\n  useEffect(() => {\n    onGetGithubRepos(username);\n  }, [onGetGithubRepos], username);\n\n  return (\n    <div className = \"profile-github\">\n      {repos === null\n        ? <Spinner />\n        : (\n          <div>\n            <h2 className = \"text-primary\">Repositories</h2>\n            {repos.map(repo => (\n              <div key = {repo.id} className = \"repo bg-white p-1 my-1\">\n                <div>\n                  <h4>\n                    <a\n                      className = \"\"\n                      href = {repo.html_url}\n                      target = \"_blank\"\n                      rel = \"noopener noreferrer\"\n                    >\n                      {repo.name}\n                    </a>\n                  </h4>\n                  <p>{repo.description}</p>\n                </div>\n                <div>\n                  <ul>\n                    <li className = \"badge badge-primary\">\n                      Stars: {repo.stargazers_count}\n                    </li>\n                    <li className = \"badge badge-dark\">\n                      Watchers: {repo.watchers_count}\n                    </li>\n                    <li className = \"badge badge-primary\">\n                      Forks: {repo.forks_count}\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            ))}\n          </div>\n        )\n      }\n    </div>\n  );\n};\n\nProfileGithub.propTypes = {\n  onGetGithubRepos: PropTypes.func.isRequired,\n  username: PropTypes.string.isRequired,\n  repos: PropTypes.array\n};\n\nconst mapStateToPropsProfileGithub = state => ({\n  repos: state.profileState.repos\n});\n\nconst mapDispatchToPropsProfileGithub = dispatch => ({\n  onGetGithubRepos: username => dispatch(doGetGithubReposWithErrorCheck(username))\n});\n\nconst ConnectedProfileGithub = connect(mapStateToPropsProfileGithub, mapDispatchToPropsProfileGithub)(ProfileGithub);\n\nexport default ConnectedProfileGithub;\n","import React, { Fragment, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../layout/Spinner\";\nimport { doGetProfileByUseridWithErrorCheck } from \"../../thunks/profile\";\nimport ProfileTop from \"./ProfileTop\";\nimport ProfileAbout from \"./ProfileAbout\";\nimport ProfileExperience from \"./ProfileExperience\";\nimport ProfileEducation from \"./ProfileEducation\";\nimport ProfileGithub from \"./ProfileGithub\";\n\nconst Profile = ({onGetProfileById, auth, profile: { profile, isLoading }, match}) => {\n  useEffect(() => {\n    onGetProfileById(match.params.id)\n  }, [onGetProfileById, match.params.id]);\n\n  return (\n    <Fragment>\n      { profile === null || isLoading\n        ? <Spinner />\n        : <Fragment>\n            <Link to = \"/profiles\" className = \"btn btn-light\">\n              Back To Profiles\n            </Link>\n            { auth.isAuthenticated && isLoading === false && auth.user._id === profile.userid._id\n              && (<Link to = \"/profile/edit\" className = \"btn btn-dark\">\n                Edit Profile\n              </Link>)\n            }\n            <div className = \"profile-grid my-1\">\n              <ProfileTop profile = { profile } />\n              <ProfileAbout profile = { profile } />\n              <div className = \"profile-exp bg-white p-2\">\n                <h2 className = \"text-primary\">Experience</h2>\n                <Fragment>\n                  {profile.experience.length > 0\n                    ? <Fragment>\n                        {profile.experience.map(experience => (\n                          <ProfileExperience\n                            key = {experience._id}\n                            experience = { experience }\n                          />\n                        ))}\n                      </Fragment>\n                    : (\n                      <h4>No experience was added</h4>\n                    )\n                  }\n                </Fragment>\n              </div>\n              <div className = \"profile-edu bg-white p-2\">\n                <h2 className = \"text-primary\">Education</h2>\n                <Fragment>\n                  {profile.education.length > 0\n                    ? <Fragment>\n                        {profile.education.map(education => (\n                          <ProfileEducation\n                            key = {education._id}\n                            education = { education }\n                          />\n                        ))}\n                      </Fragment>\n                    : (\n                      <h4>No education was added</h4>\n                    )\n                  }\n                </Fragment>\n              </div>\n              {profile.githubusername &&\n                <ProfileGithub username = {profile.githubusername} />\n              }\n            </div>\n          </Fragment>\n      }\n    </Fragment>\n  )\n};\n\nProfile.propTypes = {\n  onGetProfileById: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  profile: PropTypes.object.isRequired\n};\n\nconst mapStateToPropsProfile = state => ({\n  auth: state.authState,\n  profile: state.profileState\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onGetProfileById: id => dispatch(doGetProfileByUseridWithErrorCheck(id))\n});\n\nconst ConnectedProfile = connect(mapStateToPropsProfile, mapDispatchToProps)(Profile);\n\nexport default ConnectedProfile;\n","import { POSTS_GET, POST_GET, POST_ERROR, UPDATE_LIKE, POST_ADD,\n  POST_DELETE, COMMENT_ADD, COMMENT_REMOVE\n} from \"../constants/types\";\n\nconst doGetPosts = payload => ({\n  type: POSTS_GET,\n  payload\n});\n\nconst doSetPostError = payload => ({\n  type: POST_ERROR,\n  payload\n});\n\nconst doAddLike = payload => ({\n  type: UPDATE_LIKE,\n  payload\n});\n\nconst doRemoveLike = payload => ({\n  type: UPDATE_LIKE,\n  payload\n});\n\nconst doDeletePost = payload => ({\n  type: POST_DELETE,\n  payload\n});\n\nconst doAddPost = payload => ({\n  type: POST_ADD,\n  payload\n});\n\nconst doGetSinglePost = payload => ({\n  type: POST_GET,\n  payload\n});\n\nconst doAddComment = payload => ({\n  type: COMMENT_ADD,\n  payload\n});\n\nconst doRemoveComment = payload => ({\n  type: COMMENT_REMOVE,\n  payload\n});\n\nexport {\n  doGetPosts, doSetPostError, doAddLike, doRemoveLike, doAddPost,\n  doDeletePost, doGetSinglePost, doAddComment, doRemoveComment\n};\n","import axios from \"axios\";\n\nconst GET_POSTS_URL = \"/posts\";\nconst GET_POST_URL = \"/posts/read\";\nconst LIKE_URL = \"/posts/like\";\nconst UNLIKE_URL = \"/posts/unlike\";\nconst DELETE_POST_URL = \"/posts/destroy\";\nconst POST_ADD_URL = \"/posts/add\";\nconst COMMENT_ADD_URL = \"/posts/comments/add\";\nconst COMMENT_REMOVE_URL = \"/posts/comments/remove\";\n\nconst getPosts = async () => {\n  return await axios.get(GET_POSTS_URL);\n};\n\nconst getSinglePost = async id => {\n  return await axios.get(`${GET_POST_URL}/${id}`);\n};\n\nconst addPost = async formPostData => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  const body = JSON.stringify(formPostData);\n  return axios.post(POST_ADD_URL, body, config);\n};\n\nconst addComment = async (postid, formCommentData ) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  const body = JSON.stringify(formCommentData);\n  return axios.post(`${COMMENT_ADD_URL}/${postid}`, body, config);\n};\n\nconst removeComment = async (postid, commentid) => {\n  return axios.delete(`${COMMENT_REMOVE_URL}/${postid}/${commentid}`);\n};\n\nconst addLike = async id => {\n  return await axios.put(`${LIKE_URL}/${id}`);\n};\n\nconst removeLike = async id => {\n  return await axios.put(`${UNLIKE_URL}/${id}`);\n};\n\nconst deletePost = async id => {\n  return await axios.delete(`${DELETE_POST_URL}/${id}`);\n};\n\nexport {\n  getPosts, getSinglePost, addLike, removeLike,\n  addPost, deletePost, addComment, removeComment\n};\n","import { doGetPosts, doGetSinglePost,  doSetPostError, doAddLike, doRemoveLike,\n  doAddPost, doDeletePost, doAddComment, doRemoveComment\n} from \"../actions/post\";\nimport { getPosts, getSinglePost, addLike, removeLike, addPost, deletePost,\n  addComment, removeComment\n} from \"../apis/post\";\nimport doSetRemoveNoification from \"./notifications\";\n\nconst doGetPostsWithErrorCheck = () => {\n  return async function(dispatch) {\n    try {\n      const posts = await getPosts();\n      dispatch(doGetPosts(posts.data));\n    } catch (err) {\n      dispatch(doSetPostError({ message: err.response.statusText, status: err.response.status }));\n    }\n  }\n};\n\nconst doGetSinglePostWithErrorCheck = id => {\n  return async function(dispatch) {\n    try {\n      const post = await getSinglePost(id);\n      dispatch(doGetSinglePost(post.data));\n    } catch (err) {\n      dispatch(doSetPostError({ message: err.response.statusText, status: err.response.status }));\n    }\n  }\n};\n\nconst doAddLikeWithErrorCheck = id => {\n  return async function(dispatch) {\n    try {\n      const posts = await addLike(id);\n      dispatch(doAddLike({id, likes: posts.data}));\n    } catch (err) {\n      dispatch(doSetPostError({ message: err.response.statusText, status: err.response.status }));\n    }\n  }\n};\n\nconst doRemoveLikeWithErrorCheck = id => {\n  return async function(dispatch) {\n    try {\n      const posts = await removeLike(id);\n      dispatch(doRemoveLike({id, likes: posts.data}));\n    } catch (err) {\n      dispatch(doSetPostError({ message: err.response.statusText, status: err.response.status }));\n    }\n  }\n};\n\nconst doAddPostWithErrorCheck = formPostData => {\n  return async function(dispatch) {\n    try {\n      const posts = await addPost(formPostData);\n      dispatch(doAddPost(posts.data));\n      dispatch(doSetRemoveNoification(\"Post Added\", \"success\"));\n    } catch (err) {\n      dispatch(doSetPostError({ message: err.response.statusText, status: err.response.status }));\n    }\n  }\n};\n\nconst doDeletePostWithErrorCheck = id => {\n  return async function(dispatch) {\n    try {\n      await deletePost(id);\n      dispatch(doDeletePost(id));\n      dispatch(doSetRemoveNoification(\"Post Deleted\", \"success\"));\n    } catch (err) {\n      dispatch(doSetPostError({ message: err.response.statusText, status: err.response.status }));\n    }\n  }\n};\n\nconst doAddCommentWithErrorCheck = (postid, commentFormData) => {\n  return async function(dispatch) {\n    try {\n      const post = await addComment(postid, commentFormData);\n      dispatch(doAddComment(post.data));\n      dispatch(doSetRemoveNoification(\"Comment Added\", \"success\"));\n    } catch (err) {\n      dispatch(doSetPostError({ message: err.response.statusText, status: err.response.status }));\n    }\n  }\n};\n\nconst doRemoveCommentWithErrorCheck = (postid, commentid) => {\n  return async function(dispatch) {\n    try {\n      await removeComment(postid, commentid);\n      dispatch(doRemoveComment(commentid));\n      dispatch(doSetRemoveNoification(\"Comment Deleted\", \"success\"));\n    } catch (err) {\n      dispatch(doSetPostError({ message: err.response.statusText, status: err.response.status }));\n    }\n  }\n};\n\nexport default doGetPostsWithErrorCheck;\nexport {\n  doGetSinglePostWithErrorCheck,\n  doAddLikeWithErrorCheck, doRemoveLikeWithErrorCheck,\n  doAddPostWithErrorCheck, doDeletePostWithErrorCheck,\n  doAddCommentWithErrorCheck, doRemoveCommentWithErrorCheck\n};\n","import React, { Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport Moment from \"react-moment\";\nimport { doAddLikeWithErrorCheck, doRemoveLikeWithErrorCheck, doDeletePostWithErrorCheck } from \"../../thunks/post\";\n\nconst PostItem = ({ auth, post: {_id, text, name, avatar, userid, likes, comments, timestamp },\n  onDeletePost, onAddLike, onRemoveLike, displayActions }) => {\n  return (\n    <Fragment>\n      <div className = \"post bg-white p-1 my-1\">\n        <div>\n          <Link to = {`/profile/find/${userid}`}>\n            <img className = \"round-img\" src={avatar} alt=\"\"/>\n            <h4>{name}</h4>\n          </Link>\n        </div>\n        <div>\n          <p className = \"my-1\">{text}</p>\n          <p className = \"post-date\">\n            Posted <Moment fromNow>{timestamp}</Moment>\n          </p>\n          {displayActions && (\n            <div>\n              <button onClick = {() => onAddLike(_id) } type = \"button\" className = \"btn btn-light\">\n                <i className = \"fas fa-thumbs-up\"></i>{\" \"}\n                <span>\n                  {likes.length > 0 && (\n                    <span>{likes.length}</span>\n                  )}\n                </span>\n              </button>\n              <button onClick = {() => onRemoveLike(_id)} type = \"button\" className = \"btn btn-light\">\n                <i className = \"fas fa-thumbs-down\"></i>\n              </button>\n              <Link to = {`/posts/${_id}`} className = \"btn btn-primary\">\n                Discussion {\" \"} {comments.length > 0 && (\n                  <span className = \"comment-count\">{comments.length}</span>\n                )}\n              </Link>\n              {!auth.isLoading && userid === auth.user._id &&\n                <button onClick = {() => onDeletePost(_id)} type = \"button\" className = \"btn btn-danger\">\n                  <i className = \"fas fa-trash-alt\"></i>\n                </button>\n              }\n            </div>\n          )}\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nPostItem.defaultProps = {\n  displayActions: true\n};\n\nPostItem.propTypes = {\n  post: PropTypes.object.isRequired,\n  auth: PropTypes.object.isRequired,\n  onAddLike: PropTypes.func.isRequired,\n  onRemoveLike: PropTypes.func.isRequired,\n  onDeletePost: PropTypes.func.isRequired,\n  displayActions: PropTypes.bool.isRequired\n};\n\nconst mapSateToPropsPostItem = state => ({\n  auth: state.authState,\n});\n\nconst mapDispatchToPropsPostItem = dispatch => ({\n  onAddLike: id => dispatch(doAddLikeWithErrorCheck(id)),\n  onRemoveLike: id => dispatch(doRemoveLikeWithErrorCheck(id)),\n  onDeletePost: id => dispatch(doDeletePostWithErrorCheck(id))\n});\n\nconst ConnectedPostItem = connect(mapSateToPropsPostItem, mapDispatchToPropsPostItem)(PostItem);\n\nexport default ConnectedPostItem;\n","import React, { Fragment, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { doAddPostWithErrorCheck } from \"../../../thunks/post\";\n\nconst PostForm = ({ onAddPost }) => {\n  const [text, onSetText] = useState(\" \");\n\n  const onSubmit = e => {\n    e.preventDefault();\n    onAddPost({ text });\n    onSetText(\"\");\n  }\n\n  return (\n    <Fragment>\n      <div className = \"post-form\">\n        <div className = \"bg-primary p\">\n          <h3>Write Something...</h3>\n        </div>\n        <form className = \"form my-1\" onSubmit = {e => onSubmit(e)}>\n          <textarea\n          style = { { marginBottom: \"10px\" } }\n          name = \"text\"\n          cols = \"30\"\n          rows = \"5\"\n          placeholder = \"type your text\"\n          value = {text}\n          onChange = {e => onSetText(e.target.value)} required></textarea>\n          <input type = \"submit\" className = \"btn btn-dark ny-1\" value = \"Post\" />\n        </form>\n      </div>\n    </Fragment>\n  );\n};\n\nPostForm.propTypes = {\n  onAddPost: PropTypes.func.isRequired\n};\n\nconst mapDispatchToPropsPostFrom = dispatch => ({\n  onAddPost: text => dispatch(doAddPostWithErrorCheck(text))\n});\n\nconst ConnectedPostForm = connect(null, mapDispatchToPropsPostFrom)(PostForm);\n\nexport default ConnectedPostForm;\n","import React, { Fragment, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport Spinner from \"../layout/Spinner\";\nimport PostItem from \"./PostItem\";\nimport PostFrom from \"../Forms/Post/PostForm\";\nimport doGetPostsWithErrorCheck from \"../../thunks/post\";\n\nconst Posts = ({ onGetPosts, posts: { posts, isLoading } }) => {\n  useEffect(() => {\n    onGetPosts();\n  }, [onGetPosts])\n\n  return (\n    <Fragment>\n      { isLoading\n        ? <Spinner />\n        : (\n          <div>\n            <h1 className = \"large text-primary\">Posts</h1>\n            <p className = \"lead\">\n              <i className = \"fas fa-user\">Welcome to the community</i>\n            </p>\n            <PostFrom />\n            <div className = \"posts\">\n              {posts.map(post => (\n                <PostItem\n                  key = {post._id}\n                  post = {post}\n                />\n              ))}\n            </div>\n            {}\n          </div>\n        )\n      }\n    </Fragment>\n  );\n};\n\nPosts.propTypes = {\n  onGetPosts: PropTypes.func.isRequired,\n  posts: PropTypes.object.isRequired\n};\n\nconst mapStateToPropsPosts = state => ({\n  posts: state.postState\n});\n\nconst mapDispatchToPropsPosts = dispatch => ({\n  onGetPosts: () => dispatch(doGetPostsWithErrorCheck())\n});\n\nconst ConnectedPosts = connect(mapStateToPropsPosts, mapDispatchToPropsPosts)(Posts);\n\nexport default ConnectedPosts;\n","import React, { Fragment, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { doAddCommentWithErrorCheck } from \"../../../thunks/post\";\n\nconst CommentForm = ({postid, onAddComment}) => {\n  const [text, onSetText] = useState(\"\");\n\n  const onSubmit = e => {\n    e.preventDefault();\n    onAddComment(postid, { text });\n    onSetText(\"\");\n  };\n\n  return (\n    <Fragment>\n      <div className = \"post-form\">\n        <div className = \"bg-primary p\">\n          <h3>Leave a comment...</h3>\n        </div>\n        <form className = \"form my-1\" onSubmit = {e => onSubmit(e)}>\n          <textarea\n          style = { { marginBottom: \"10px\" } }\n          name = \"text\"\n          cols = \"30\"\n          rows = \"5\"\n          placeholder = \"type your text\"\n          value = {text}\n          onChange = {e => onSetText(e.target.value)} required></textarea>\n          <input type = \"submit\" className = \"btn btn-dark ny-1\" value = \"Comment\" />\n        </form>\n      </div>\n    </Fragment>\n  );\n};\n\nCommentForm.propTypes = {\n  onAddComment: PropTypes.func.isRequired,\n  postid: PropTypes.string.isRequired\n};\n\nconst mapDispatchToPropsCommentForm = dispatch => ({\n  onAddComment: (postid, text) => dispatch(doAddCommentWithErrorCheck(postid, text))\n});\n\nconst ConnectedCommentForm = connect(null, mapDispatchToPropsCommentForm)(CommentForm);\n\nexport default ConnectedCommentForm;\n","import React, { Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport Moment from \"react-moment\";\nimport { doRemoveCommentWithErrorCheck } from \"../../thunks/post\";\n\nconst Comments = ({ postid, comments, onRemoveComment, auth : {user, isLoading} }) =>\n  <Fragment>\n    <div className = \"comments\">\n      {comments.map(comment => (\n        <div className = \"post bg-white p-1 my-1\">\n          <div>\n            <Link to = {`/profile/${comment.userid}`} >\n              <img className = \"round-img\" alt = \"\" src = {comment.avatar} />\n              <h4>{comment.name}</h4>\n            </Link>\n          </div>\n          <div>\n            <p className = \"my-1\">\n              {comment.text}\n            </p>\n            <p className = \"post-date\">\n              Posted <Moment fromNow>{comment.timestamp}</Moment>\n            </p>\n            {!isLoading && comment.userid === user._id &&\n              <button\n              className = \"btn btn-danger\"\n              onClick = { () => { onRemoveComment(postid, comment._id) } }\n              type = \"button\"\n              >\n                <i className = \"fas fa-trash-alt\"></i>\n              </button>\n            }\n          </div>\n        </div>\n      ))}\n    </div>\n  </Fragment>\n\nComments.propTypes = {\n  postid: PropTypes.string.isRequired,\n  comments: PropTypes.array.isRequired,\n  auth: PropTypes.object.isRequired,\n  onRemoveComment: PropTypes.func.isRequired\n};\n\nconst mapStateToPropsComments = state => ({\n  auth: state.authState\n});\n\nconst mapDispatchToPropsCommets = dispatch => ({\n  onRemoveComment: (postid, commentid) =>\n    dispatch(doRemoveCommentWithErrorCheck(postid, commentid))\n});\n\nconst ConnectedComments = connect(mapStateToPropsComments, mapDispatchToPropsCommets)(Comments);\n\nexport default ConnectedComments;\n","import React, { Fragment, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport Spinner from \"../layout/Spinner\";\nimport PostItem from \"../posts/PostItem\";\nimport CommentForm from \"../Forms/Post/CommentForm\";\nimport Comments from \"./Comments\";\nimport { doGetSinglePostWithErrorCheck } from \"../../thunks/post\";\n\nconst Post = ({ onGetSinglePost, match, post: { post, isLoading } }) => {\n  useEffect(() => {\n    onGetSinglePost(match.params.id);\n  }, [onGetSinglePost, match.params.id])\n\n  return (\n    <Fragment>\n      {isLoading || post === null\n        ? <Spinner/>\n        : (\n          <div>\n            <Link to = \"/posts\" className = \"btn\">Back To Posts</Link>\n            <PostItem post = {post} displayActions = {false} />\n            <CommentForm postid = {post._id} />\n            <Comments postid= {post._id} comments = {post.comments} />\n          </div>\n        )\n      }\n    </Fragment>\n  );\n};\n\nPost.propTypes = {\n  onGetSinglePost: PropTypes.func.isRequired,\n  post: PropTypes.object.isRequired\n};\n\nconst mapStateToPropsPost = state => ({\n  post: state.postState\n});\n\nconst mapDispatchToPropsPost = dispatch => ({\n  onGetSinglePost: id => dispatch(doGetSinglePostWithErrorCheck(id))\n});\n\nconst ConnectedPost = connect(mapStateToPropsPost, mapDispatchToPropsPost)(Post);\n\nexport default ConnectedPost;\n","import React, { Fragment, useEffect } from 'react';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Route, Switch } from \"react-router\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport PrivateRoute from \"./components/routes/PrivateRoute\";\nimport setAuthTokenHeader from \"./utils/setAuthTokenHeader\";\nimport { doLoadUserWithErrorCheck } from \"./thunks/register\";\nimport Navbar from \"./components/layout/Navbar\";\nimport Landing from \"./components/layout/Landing\";\nimport SignUp from \"./components/auth/SignUp\";\nimport Login from \"./components/auth/Login\";\nimport Notifications from \"./components/layout/Notifications\";\nimport Dashboard from \"./components/dashboard/Dashboard\";\nimport CreateProfile from \"./components/Forms/Profile/CreateProfile\";\nimport EditProfile from \"./components/Forms/Profile/EditProfile\";\nimport AddExperience from \"./components/Forms/Profile/AddExprience\";\nimport AddEducation from \"./components/Forms/Profile/AddEducation\";\nimport Profiles from \"./components/profiles/Profiles\";\nimport Profile from \"./components/profile/Profile\";\nimport Posts from \"./components/posts/Posts\";\nimport Post from \"./components/posts/Post\";\nimport './App.css';\n\nif (localStorage.token) {\n  setAuthTokenHeader(localStorage.token);\n}\n\nconst App = () => {\n  useEffect(() => {\n    store.dispatch(doLoadUserWithErrorCheck());\n  }, []); // Used useEffect() hooks in place of the componentDidMount() lifecycle method\n\n  return (\n    <Provider store = {store}>\n      <Router>\n        <Fragment>\n          <Navbar />\n          <Route exact path = \"/\" component = { Landing } />\n          <section className = \"container\">\n            <Notifications />\n            <Switch>\n              <Route exact path = \"/signup\" component = { SignUp } />\n              <Route exact path = \"/login\" component = { Login } />\n              <Route exact path = \"/profiles\" component = { Profiles } />\n              <Route exact path = \"/profile/find/:id\" component = { Profile } />\n              <PrivateRoute exact path = \"/dashboard\" component = { Dashboard }/>\n              <PrivateRoute exact path = \"/profile/create\" component = { CreateProfile } />\n              <PrivateRoute exact path = \"/profile/edit\" component = { EditProfile } />\n              <PrivateRoute exact path = \"/experience/add\" component = { AddExperience } />\n              <PrivateRoute exact path = \"/education/add\" component = { AddEducation } />\n              <PrivateRoute exact path = \"/posts\" component = { Posts } />\n              <PrivateRoute exact path = \"/posts/:id\" component = { Post } />\n            </Switch>\n          </section>\n        </Fragment>\n      </Router>\n    </Provider>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\nmodule.hot && module.hot.accept();\n"],"sourceRoot":""}